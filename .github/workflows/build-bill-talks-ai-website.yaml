# This workflow builds the BillTalksAI.com website.
# Open this repo's Dockerfile to:
#  1. Build the source:
#*     repo bill-talks-ai-website-repo
#  2. And copy files to the target:
#*     repo bill-talks-ai-website
#  3. At any time along the way, run any required scripts
name: Build Bill Talks AI website

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: # you can trigger the workflow manually

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true # stop this workflow from running if another push comes in

jobs:
  build-bill-talks-ai-website:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Allows the workflow to write to the target repo
    env:
      WORKSPACE_PATH: /workspaces/ # when the action opens the source dockerfile, use this as the top-level folder
      REPO_NAME: ${{ github.event.repository.name }} # when the action opens the dockerfile, use this as the top-level sub-folder
      BILL_TALKS_AI_PAT: ${{ secrets.BILL_TALKS_AI_WEBSITE_PAT }} # Secret code created from developer settings
      REPO_OWNER: ${{ github.repository_owner }}
      TARGET_REPO: bill-talks-ai-website
      BUILD_TEMP_CONTAINER: temp-container
      BUILD_TEMP_IMAGE: temp-image:latest
      SOURCE_WEBSITE_LOCATION: ./public
      TARGET_TEMP_REPO_FOLDER: temp-public 

    steps:
    - name: Display environment variables
      run: |
        echo 'WORKSPACE_PATH: /workspaces/'
        echo 'REPO_NAME: ${{ github.event.repository.name }}'
        echo 'BILL_TALKS_AI_PAT: ${{ secrets.BILL_TALKS_AI_WEBSITE_PAT }}'
        echo 'REPO_OWNER: ${{ github.repository_owner }}'
        echo 'TARGET_REPO: bill-talks-ai-website'
        echo 'BUILD_TEMP_CONTAINER: temp-container'
        echo 'BUILD_TEMP_IMAGE: temp-image:latest'
        echo 'SOURCE_WEBSITE_LOCATION: ./public'
        echo 'TARGET_TEMP_REPO_FOLDER: temp-public'

    - name: Checkout source repo
      uses: actions/checkout@v4

    - name: Set up Docker Buildx # Build for AMD64 or ARM64
      uses: docker/setup-buildx-action@v3

    - name: Build the source Docker image
      uses: docker/build-push-action@v5 # This workflow uses "build", not "push"
      with:
        context: .
        file: ./Dockerfile # Open the dockerfile in this GitHub repo
        load: true
        tags: ${{ env.BUILD_TEMP_IMAGE }} # temporary image name and tag

    - name: Run Docker container, build with Hugo, and list public contents
      run: |
        docker run --name ${{ env.BUILD_TEMP_CONTAINER }} -v ${{ github.workspace }}:${{ env.WORKSPACE_PATH }}${{ env.REPO_NAME }} ${{ env.BUILD_TEMP_IMAGE }} /bin/bash -c "
          echo 'Make it okay to run git commands in the source folder'
          git config --global --add safe.directory ${{ env.WORKSPACE_PATH }}${{ env.REPO_NAME }}
          cd ${{ env.WORKSPACE_PATH }}${{ env.REPO_NAME }}
          echo 'Here is a list of the files in ${{ env.WORKSPACE_PATH }}${{ env.REPO_NAME }}'
          ls -la
          echo 'Use package.json script to ensure bootstrap is installed'
          npm run install-bootstrap
          echo 'Use package.json script to copy bootstrap files to a static folder'
          npm run copy-bootstrap
          echo 'Use package.json script to build the Hugo site'
          npm run build-hugo-for-prod
          "

    - name: Checkout target repo for staging
      uses: actions/checkout@v4
      with: # you can add ref: 'branch' for a specific branch
        token: ${{ env.BILL_TALKS_AI_PAT }} #* Required in order to push the code later in a future step
        repository: ${{ env.REPO_OWNER }}/${{ env.TARGET_REPO }}
        path: ${{ env.TARGET_TEMP_REPO_FOLDER }} # checkout to a temporary target folder to copy files

    - name: Copy source public website folder to the target staging folder
      run: | # 
        echo 'remove all files from the target main branch'
        rm -rf ./${{ env.TARGET_TEMP_REPO_FOLDER }}/*
        echo 'copy source website files to the target repo'
        cp -r ./public/. ./${{ env.TARGET_TEMP_REPO_FOLDER }}/
        echo 'list files in the target repo'
        ls -la ./${{ env.TARGET_TEMP_REPO_FOLDER }}

    #* Since target checkout and commit/push are in different locations
    #* You must make sure you use with: token: in the checkout target job
    - name: Commit temporary target folder and push to target's main root
      run: |
        # todo: Maybe add git checkout main
        echo 'cd into temporary target folder'
        cd ${{ env.TARGET_TEMP_REPO_FOLDER }}
        echo 'configure git user name'
        git config --global user.name "${{ env.REPO_OWNER }}"
        echo 'configure git user email'
        git config --global user.email "${{ env.REPO_OWNER }}@noreply.github.com"
        echo 'git add target website files'
        git add .
        echo 'git commit all files, even if this is an empty commit'
        #* Use allow-empty otherwise we may not push code to the target source if no change
        git commit --allow-empty -m "Update website content"
        echo 'list files in the target repo'
        ls -la
        echo 'git push target website files to the target repo for prod'
        git push --force # push code to the target repo
