name: Build Bill Talks AI website

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: # you can trigger the workflow manually

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true # this workflow stops other concurrent workflows from running

jobs:
  build-bill-talks-ai-website:
    runs-on: ubuntu-latest
    env:
      WORKSPACE_PATH: /workspaces/ # when the action opens the dockerfile, use this as the top-level folder
      REPO_NAME: ${{ github.event.repository.name }} # when the action opens the dockerfile, use this as the top-level sub-folder
      BILL_TALKS_AI_PAT: ${{ secrets.BILL_TALKS_AI_PAT }} # Secret code created from developer settings
      REPO_OWNER: ${{ github.repository_owner }}
      TARGET_REPO: bill-talks-ai-website
      BUILD_TEMP_CONTAINER: temp-container
      BUILD_TEMP_IMAGE: temp-image:latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true # Fetch Git submodules that Hugo might use

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5 # In this case, used for building the Dockerfile, not for pushing
      with:
        context: .
        file: ./Dockerfile # Open the dockerfile in this GitHub repo
        load: true
        tags: ${{ env.BUILD_TEMP_IMAGE }} # temporary image name and tag

    - name: Run Docker container, build with Hugo, and list public contents
      run: |
        docker run --name ${{ env.BUILD_TEMP_CONTAINER }} -v ${{ github.workspace }}:${{ env.WORKSPACE_PATH }}${{ env.REPO_NAME }} ${{ env.BUILD_TEMP_IMAGE }} /bin/bash -c "\
          cd ${{ env.WORKSPACE_PATH }}${{ env.REPO_NAME }} && 
          set -x; \
          echo 'Here is a list of the files in ${{ env.WORKSPACE_PATH }}${{ env.REPO_NAME }}' && \
          ls -la && \
          echo 'Install Bootstrap just in case files are missing' && \
          npm install bootstrap && \
          echo 'Use package.json file to copy bootstrap files to the static folder' && \
          npm run copy-bootstrap && \
          echo 'Build the Hugo site' && \
          hugo -s . -d public --gc --cleanDestinationDir --minify --logLevel debug"

    - name: ls test
      run: |
        echo 'Here is a list of the files:'
        ls -la

    
    # - name: Build the Hugo website
    #   run: |
    #     docker exec -i ${{ env.BUILD_TEMP_CONTAINER }} sh << 'EOF'
    #       echo 'set -x'
    #       set -x;
    #       echo cd into the workspace
    #       cd ${{ env.WORKSPACE_PATH }}${{ env.REPO_NAME }}
    #       echo 'list files in ${{ env.WORKSPACE_PATH }}${{ env.REPO_NAME }}'
    #       ls -la
    #       echo 'Install Bootstrap just in case files are missing'
    #       npm install bootstrap
    #       echo 'Use package.json file to copy bootstrap files to the static folder'
    #       npm run copy-bootstrap
    #       echo 'Build the Hugo site'
    #       hugo -s . -d public --gc --cleanDestinationDir --minify --logLevel debug"
    #     EOF

    - name: Checkout target repository in a separate directory
      uses: actions/checkout@v4
      with:
        repository: '${{ github.repository_owner }}/${{ env.TARGET_REPO }}'
        token: ${{ secrets.BILL_TALKS_AI_PAT }}
        path: 'target_repo'
        ref: main

    - name: Sync site content to target repository in the runner
      run: |
        echo 'rsync'
        rsync -av --delete public/ target_repo/

    - name: Set correct git remote
      run: |
        git remote set-url origin https://github.com/${{ github.repository_owner }}/${{ env.TARGET_REPO }}.git
  
    - name: Custom Push to Target Repository
      run: |
        cd target_repo
        echo 'git status before commit'
        git status
        echo 'List of items in the root /target repo:'
        ls -la
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        echo 'git add'
        git add .
        echo 'git status'
        git status
        echo 'git commit'
        git commit -m "Update site content via GitHub Actions" || echo "No changes to commit"
        echo 'push /target content to the target repo'
        git push origin main
      env:
        GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
